# Big Bang Additions
# Optional key/secret for IAM role when using SOPS encryption in AWS.
awsCredentials:
  awsAccessKeyId: ""
  awsSecretAccessKey: ""
  awsDefaultRegion: "us-gov-west-1"
## Your FQDN will be ${ .Values.subdomain }.${ .Values.domain }
domain: dev.bigbang.mil
istio:
  # -- Toggle BigBang istio integration
  enabled: false
  hardened:
    enabled: false
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    customServiceEntries: []
    # - name: "allow-google"
    #   enabled: true
    #   spec:
    #     exportTo:
    #       - "."
    #     hosts:
    #       - google.com
    #     location: MESH_EXTERNAL
    #     ports:
    #       - number: 443
    #         protocol: TLS
    #         name: https

    customAuthorizationPolicies: []
    # - name: "allow-nothing"
    #   enabled: true
    #   spec: {}
    monitoring:
      enabled: true
      namespaces:
      - monitoring
      principals:
      - cluster.local/ns/monitoring/sa/monitoring-grafana
      - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-alertmanager
      - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-operator
      - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-prometheus
      - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-state-metrics
      - cluster.local/ns/monitoring/sa/monitoring-monitoring-prometheus-node-exporter
    argocd:
      enabled: true
      namespaces:
      - argocd
      principals:
      - cluster.local/ns/argocd/sa/argocd-application-controller
      - cluster.local/ns/argocd/sa/argocd-applicationset-controller
      - cluster.local/ns/argocd/sa/argocd-argocd-redis-bb
      - cluster.local/ns/argocd/sa/argocd-argocd-repo-server
      - cluster.local/ns/argocd/sa/argocd-dex-server
      - cluster.local/ns/argocd/sa/argocd-notifications-controller
      - cluster.local/ns/argocd/sa/argocd-server
      - cluster.local/ns/argocd/sa/upgrade-job-svc-account
      - cluster.local/ns/argocd/sa/argocd-argocd-redis-bb-metrics
  # -- Toggle BigBang istio injection
  injection: "disabled"
  # -- Default argocd peer authentication
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT
  argocd:
    # -- Toggle Istio VirtualService creation
    enabled: true
    # -- Set Annotations for VirtualService
    annotations: {}
    # -- Set Labels for VirtualService
    labels: {}
    # -- Set Gateway for VirtualService
    gateways:
    - istio-system/main
    # -- Set Hosts for VirtualService
    hosts:
    - argocd.{{ .Values.domain }}
monitoring:
  # -- Toggle BigBang monitoring integration
  enabled: false
networkPolicies:
  # -- Toggle BigBang networkPolicies integration
  enabled: false
  ingressLabels:
    app: istio-ingressgateway
    istio: ingressgateway
  # -- Control Plane CIDR, defaults to 0.0.0.0/0, use `kubectl get endpoints -n default kubernetes` to get the CIDR range needed for your cluster
  # Must be an IP CIDR range (x.x.x.x/x - ideally with /32 for the specific IP of a single endpoint, broader range for multiple masters/endpoints)
  # Used by package NetworkPolicies to allow Kube API access
  controlPlaneCidr: 0.0.0.0/0
  additionalPolicies: []
upgradeJob:
  enabled: true
  image:
    repository: registry1.dso.mil/ironbank/big-bang/base
    tag: 2.1.0
    imagePullPolicy: IfNotPresent
# Big Bang Continuous Integration Testing Only
bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: "http://argocd-server"
      cypress_user: "admin"
      cypress_password: "Password123"
      cypress_timeout: "120000"
    resources:
      requests:
        cpu: 4
        memory: 4Gi
      limits:
        cpu: 4
        memory: 8Gi
  scripts:
    image: "registry1.dso.mil/bigbang-ci/devops-tester:1.1.2"
    envs:
      ARGOCD_SERVER: "http://argocd-server"
      ARGOCD_USER: "admin"
      ARGOCD_PASSWORD: "Password123"

# -- BigBang HA Redis Passthrough
redis-bb:
  enabled: true
  cleanUpgrade:
    enabled: true
  networkPolicies:
    enabled: true

  # pass throughs to BigBang's redis
  # https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/redis/-/blob/main/chart/values.yaml
  upstream:
    auth:
      enabled: false
    istio:
      redis:
        enabled: false
    image:
      pullSecrets:
      - private-registry
    metrics:
      enabled: true
      # --  Custom labels for the haproxy pod. This is relevant for Argo CD CLI.
      labels:
        app.kubernetes.io/name: argocd-redis-ha-haproxy
      metrics:
      # -- HAProxy enable prometheus metric scraping
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsGroup: 1001
    master:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 100m
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
    replica:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 100m
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 10
        timeoutSeconds: 30
        successThreshold: 1
        failureThreshold: 3
        tcpSocket:
          port: 6379
    commonConfiguration: |-
      maxmemory 200mb
      save ""

## Argo CD configuration
## Ref: https://github.com/argoproj/argo-cd

## Passthrough pattern
global:
  image:
    repository: registry1.dso.mil/ironbank/big-bang/argocd
    tag: v3.1.3
    imagePullPolicy: IfNotPresent
  imagePullSecrets:
    - name: private-registry

argocd-apps:
  applications: {}
  projects: {}
  applicationsets: {}
  itemTemplates: []
  exports: {}

# -- We are exposing only the keys that BigBang overrides from the upstream chart. Please refer to the [upstream chart](https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml) for other value configs.
upstream:
  configs:
    params:
      server.insecure: true

  controller:
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
    resources:
      limits:
        cpu: 500m
        memory: 3Gi
      requests:
        cpu: 500m
        memory: 3Gi
    readinessProbe:
      timeoutSeconds: 30

  ## Dex
  dex:
    image:
      repository: registry1.dso.mil/ironbank/opensource/dexidp/dex
      tag: v2.44.0

    resources:
      limits:
        cpu: 20m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 128Mi

    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000

    livenessProbe:
      timeoutSeconds: 30
    readinessProbe:
      timeoutSeconds: 30

  ## Redis
  redis:
    enabled: false

  # External Redis parameters
  externalRedis:
    host: "argocd-argocd-redis-bb-headless.argocd.svc.cluster.local"

  redisSecretInit:
    enabled: false

  server:
    resources:
      limits:
        cpu: 20m
        memory: 128Mi
      requests:
        cpu: 20m
        memory: 128Mi
    readinessProbe:
      failureThreshold: 5
      timeoutSeconds: 30
    livenessProbe:
      failureThreshold: 5
      timeoutSeconds: 30
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000

  repoServer:
    resources:
      limits:
        cpu: 100m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 1Gi
    readinessProbe:
      failureThreshold: 5
      timeoutSeconds: 30
    livenessProbe:
      failureThreshold: 5
      timeoutSeconds: 30
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000

  applicationSet:
    enabled: true
    readinessProbe:
      failureThreshold: 5
      timeoutSeconds: 30
    livenessProbe:
      failureThreshold: 5
      timeoutSeconds: 30
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000

  notifications:
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
